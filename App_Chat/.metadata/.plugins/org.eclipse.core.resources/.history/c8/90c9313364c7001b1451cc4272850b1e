package dao;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Map.Entry;
import java.util.NavigableMap;
import java.util.TreeMap;

public class Mypublic {
    private static String DB_URL = "jdbc:sqlserver://THANHXUAN:1433;"
            + "databaseName=DOANJAVA;";
    private static String DB_USER_NAME = "admin";
    private static String DB_PASSWORD = "admin";
    private static Connection conn=null;
    
    private static NavigableMap<String,String> listUser = new TreeMap<String, String>();
    
    public static String server_address;

    public static Connection getConnection() {
        try {
        	Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(DB_URL,DB_USER_NAME,DB_PASSWORD);
            //conn.setAutoCommit(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return conn;
    }
    
    public static void insertUser(String taikhoan)
    {
    	listUser.put(taikhoan, taikhoan);
    }
    public static void removeUser(String taikhoan)
    {
    	listUser.remove(taikhoan);
    }
    public static Entry<String, String> lastEntry() // last entry chính là user cuối cùng được thêm vào (vừa mới đăng nhập)
    {
    	return listUser.lastEntry();
    }
	public String MaHoaPwd(String password) {
		 
		 try { 
	            // gọi băn MD5
	            MessageDigest md = MessageDigest.getInstance("MD5"); 
	  
	            // digest() method is called to calculate message digest 
	            //  of an input digest() return array of byte 
	            byte[] messageDigest = md.digest(password.getBytes()); 
	  
	            // Convert byte array into signum representation 
	            BigInteger no = new BigInteger(1, messageDigest); 
	  
	            // Convert message digest into hex value 
	            String hashtext = no.toString(16); 
	            while (hashtext.length() < 32) { 
	                hashtext = "0" + hashtext; 
	            } 
	            return hashtext; 
	        }  
	        // For specifying wrong message digest algorithms 
	        catch (NoSuchAlgorithmException e) { 
	            throw new RuntimeException(e); 
	        } 

	}
}
